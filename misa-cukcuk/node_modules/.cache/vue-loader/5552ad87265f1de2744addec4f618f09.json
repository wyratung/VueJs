{"remainingRequest":"D:\\MisaVueJS\\VueJs\\misa-cukcuk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MisaVueJS\\VueJs\\misa-cukcuk\\src\\components\\base\\BaseTable.vue?vue&type=style&index=0&id=8c0fb7a2&scoped=true&lang=css&","dependencies":[{"path":"D:\\MisaVueJS\\VueJs\\misa-cukcuk\\src\\components\\base\\BaseTable.vue","mtime":1628433351522},{"path":"D:\\MisaVueJS\\VueJs\\misa-cukcuk\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MisaVueJS\\VueJs\\misa-cukcuk\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\MisaVueJS\\VueJs\\misa-cukcuk\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\MisaVueJS\\VueJs\\misa-cukcuk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MisaVueJS\\VueJs\\misa-cukcuk\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KQGltcG9ydCB1cmwoIi4uLy4uL2Nzcy9jb21tb24vZW1wbG95ZWUtdGFibGUuY3NzIik7DQo="},{"version":3,"sources":["BaseTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA","file":"BaseTable.vue","sourceRoot":"src/components/base","sourcesContent":["<template>\r\n  <div class=\"wrapper-data\">\r\n    <div class=\"grid\" id=\"grid\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th></th>\r\n            <th>#</th>\r\n            <th v-for=\"(tableHeader, index) in tableHeaders\" :key=\"index\">\r\n              {{ Object.values(tableHeader)[0] }}\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody >\r\n          <tr\r\n            v-for=\"(tableContent, index) in tableContents\"\r\n            :key=\"tableContent.EmployeeId\"\r\n            @click=\"oneClick(index)\"\r\n            :class=\"{ 'row--selected': isSelectedRow(index) }\"\r\n          >\r\n            <td>\r\n              <div\r\n                class=\"checkbox\"\r\n                :class=\"{ 'checkbox--active': isSelectedRow(index) }\"\r\n              >\r\n                <i class=\"fas fa-check\"></i>\r\n              </div>\r\n            </td>\r\n            <td>\r\n              {{ index + 1 }}\r\n            </td>\r\n            <td\r\n              v-for=\"(tableHeader, index) in tableHeaders\"\r\n              :key=\"index\"\r\n              :class=\"textAlignObject(index)\"\r\n            >\r\n              {{ formatTableContent(tableContent, tableHeader) }}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {};\r\n</script>\r\n\r\n<style scoped>\r\n@import url(\"../../css/common/employee-table.css\");\r\n</style>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport CommonMethods from \"../../mixins/CommonMethods.js\";\r\nimport { eventBus } from \"../../main.js\";\r\nexport default {\r\n  name: \"BaseTable\",\r\n  mixins: [CommonMethods],\r\n  props: {\r\n    urlAPI: String,\r\n    tableHeaders: Array,\r\n  },\r\n  mounted() {\r\n    var vm = this;\r\n    axios\r\n      .get(this.urlAPI)\r\n      .then((response) => (vm.tableContents = response.data))\r\n      .catch((response) => console.log(response));\r\n  },\r\n  data() {\r\n    return {\r\n      tableContents: [],\r\n      isActive: false,\r\n      listSelectedRow: [],\r\n      listSelectedEmployees: [],\r\n      delay: 300,\r\n      clicks: 0,\r\n      timer: null,\r\n    };\r\n  },\r\n  methods: {\r\n    /**\r\n     * xác định xem người dùng click hay double click vào đòng trên bảng\r\n     *@param {Int} index: chỉ sổ của dòng trong bảng\r\n     \r\n     */\r\n    oneClick(index) {\r\n      var self = this;\r\n      this.clicks++;\r\n      if (this.clicks === 1) {\r\n        this.timer = setTimeout(function () {\r\n          self.chooseTableRow(index);\r\n          eventBus.$emit(\"showSelectedEmployees\", self.listSelectedEmployees);\r\n          self.clicks = 0;\r\n        }, this.delay);\r\n      } else {\r\n        clearTimeout(this.timer);\r\n        this.clicks = 0;\r\n        //show form staff\r\n        self.editEmployee( self.tableContents[index]);\r\n      }\r\n    },\r\n    /**\r\n     * @param {}  self: component hiện tại\r\n     * @param {Object} employeeData chứa dữ liệu nhân viên\r\n     \r\n     * modified: nvdien(5/8/2021)\r\n     */\r\n    editEmployee( employeeData) {\r\n      this.$emit(\"editEmployee\", employeeData);\r\n    },\r\n    /**\r\n     * định dạng dữ liệu trong ô của table bên trái, giữa hay phải\r\n     *  @param {Int} index : chỉ số ứng với header của table\r\n     *  return chuỗi class định dạng\r\n     \r\n     */\r\n    textAlignObject(index) {\r\n      let typeFormat = this.tableHeaders[index].type;\r\n      switch (typeFormat) {\r\n        case \"0\":\r\n          return \"text-align-left\";\r\n        case \"1\":\r\n          return \"text-align-center\";\r\n        case \"2\":\r\n          return \"text-align-right\";\r\n        default:\r\n          return \"\";\r\n      }\r\n    },\r\n    /**\r\n     * thêm hoặc bớt chỉ số của hàng vào trong danh sách các hàng được chọn\r\n     * @param {Int} index chỉ số của hàng chọn\r\n     \r\n     */\r\n    chooseTableRow(index) {\r\n      const position = this.listSelectedRow.indexOf(index);\r\n      if (position == -1) {\r\n        this.listSelectedRow.push(index);\r\n        this.listSelectedEmployees.push(this.tableContents[index]);\r\n      } else {\r\n        this.listSelectedRow.splice(position, 1);\r\n        this.listSelectedEmployees.splice(this.tableContents[index], 1);\r\n      }\r\n    },\r\n    /**\r\n     * Kiểm tra xem index đã có trong danh sách hàng được chọn chưa\r\n     * @param {Int} index index của hàng được chọn\r\n     * return {boolean} đúng nếu đã có trong đanh sách, sai nếu chưa co\r\n     \r\n     */\r\n    isSelectedRow(index) {\r\n      return this.listSelectedRow.includes(index);\r\n    },\r\n    /**\r\n     * Lấy giá trị của ô trong table và định dạng theo convention ngày, tiền lương\r\n     * @param {Object} tableContent : chứa thông tin api trả về\r\n     * @param {Object} tableHeader: chứa thông tin  Header của bảng\r\n     * return chuỗi chứa giá trị được đổ lên bảng theo đúng định dạng\r\n     \r\n     */\r\n    formatTableContent(tableContent, tableHeader) {\r\n      let cellData = tableContent[Object.keys(tableHeader)[0]];\r\n      let typeFormat = Object.values(tableHeader)[1];\r\n      if (typeFormat === \"1\") {\r\n        // định dạng ngày\r\n        return this.formatDate(cellData, \"/\");\r\n      }\r\n      if (typeFormat === \"2\") {\r\n        // định dạng tiền lương\r\n        return this.formatMoney(cellData);\r\n      }\r\n      return cellData;\r\n    },\r\n  },\r\n};\r\n</script>"]}]}